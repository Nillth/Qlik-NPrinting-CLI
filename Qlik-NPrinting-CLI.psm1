<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.166
     Generated on:       2019-08-09 2:59 PM
     Generated by:       Marc Collins
     Organization:       Qlik - Consulting
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2019
#>


#region Invoke-Get-NPSession_ps1
	<#
		.SYNOPSIS
			Creates a Authenticated Session Token
		
		.DESCRIPTION
			Get-NPSession creates the NPEnv Script Variable used to Authenticate Requests
			$Script:NPEnv
	
		.NOTES
			Additional information about the function.
	#>
	function Get-NPSession
	{
		[CmdletBinding(DefaultParameterSetName = 'Default')]
		param
		(
			[Parameter(ParameterSetName = 'Default')]
			[ValidateSet('http', 'https')]
			[string]$Prefix = 'https',
			[Parameter(ParameterSetName = 'Default',
					   Position = 0)]
			[string]$Computer = $($env:computername),
			[Parameter(ParameterSetName = 'Default',
					   Position = 1)]
			[string]$Port = '4993',
			[switch]$Return,
			[Parameter(ParameterSetName = 'Default')]
			[Parameter(ParameterSetName = 'Creds')]
			[pscredential]$Credentials,
			[Parameter(ParameterSetName = 'Default')]
			[switch]$TrustAllCerts
		)
		
		$APIPath = "api"
		$APIVersion = "v1"
		
		if ($Computer -eq $($env:computername))
		{
			$NPService = Get-Service -Name 'QlikNPrintingWebEngine'
			if ($null -eq $NPService)
			{
				Write-Error -Message "Local Computer Name used and Service in not running locally"
				
				break
			}
		}
		
		if ($Computer -match ":")
		{
			If ($Computer.ToLower().StartsWith("http"))
			{
				$Prefix, $Computer = $Computer -split "://"
			}
			
			if ($Computer -match ":")
			{
				$Computer, $Port = $Computer -split ":"
			}
		}
		$CookieMonster = New-Object System.Net.CookieContainer #[System.Net.CookieContainer]::new()
		$Script:NPEnv = @{
			TrustAllCerts = $TrustAllCerts.IsPresent
			Prefix	      = $Prefix
			Computer	  = $Computer
			Port		  = $Port
			API		      = $APIPath
			APIVersion    = $APIVersion
			URLServerAPI  = ""
			WebRequestSession = New-Object Microsoft.PowerShell.Commands.WebRequestSession # [Microsoft.PowerShell.Commands.WebRequestSession]::new()
		}
		if ($null -ne $Credentials)
		{
			$NPEnv.Add("Credentials", $Credentials)
		}
		
		$NPEnv.URLServerAPI = "$($NPEnv.Prefix)://$($NPEnv.Computer):$($NPEnv.Port)/$($NPEnv.API)/$($NPEnv.APIVersion)"
		$WRS = $NPEnv.WebRequestSession
		$WRS.UserAgent = "Windows"
		$WRS.Cookies = $CookieMonster
		
		switch ($PsCmdlet.ParameterSetName)
		{
			'Default' {
				$WRS.UseDefaultCredentials = $true
				$APIAuthScheme = "ntlm"
				break
			}
			'Creds' {
				$WRS.Credentials = $Credentials
				$APIAuthScheme = "ntlm"
				break
			}
			'Certificate' {
				<#
				#Certificate Base Authentication does not currently work as the APIs cannot handle it.
				#Leaving this here in case this is added in the future.
				#Cert
				$NPrintCert = Get-ChildItem Cert:\LocalMachine\My\ | ?{ $_.Issuer -eq "CN=NPrinting-CA" }
				$UserCert = Get-ChildItem Cert:\CurrentUser\My -Eku "Client Authentication"
				$CertificateCollection = [System.Security.Cryptography.X509Certificates.X509Certificate2Collection]::new()
				$CertificateCollection.Add($NPrintCert)
				$CertificateCollection.Add($UserCert)
				$WebRequestSession.Certificates = $CertificateCollection
				#>			
			}
		}
		$URLServerLogin = "$($NPEnv.URLServerAPI)/login/$($APIAuthScheme)"
		Write-Verbose -Message $URLServerLogin
		$AuthToken = Invoke-NPRequest -path "login/$($APIAuthScheme)" -method get
		$token = $NPenv.WebRequestSession.Cookies.GetCookies($NPenv.URLServerAPI) | Where-Object{ $_.name -eq "NPWEBCONSOLE_XSRF-TOKEN" }
		$Header = New-Object 'System.Collections.Generic.Dictionary[String,String]'
		$Header.Add("X-XSRF-TOKEN", $token.Value)
		$NPEnv.header = $Header
		if ($Return -eq $true)
		{
			$AuthToken
		}
	}
	
#endregion

#region Invoke-Invoke-NPRequest_ps1
	function Invoke-NPRequest
	{
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			[string]$Path,
			[ValidateSet('Get', 'Post', 'Patch', 'Delete', 'Put')]
			[string]$method = 'Get',
			$Data
		)
		if ($null -eq $NPEnv) { Get-NPSession }
		$URI = "$($NPEnv.URLServerAPI)/$($path)"
		
		$Script:SplatRest = @{
			URI	       = $URI
			WebSession = $($NPEnv.WebRequestSession)
			Method	   = $method
			ContentType = "application/json"
			Headers    = $NPenv.header
		}
		
		if ($PSVersionTable.PSVersion.Major -gt 5 -and $NPEnv.TrustAllCerts)
		{
			$Script:SplatRest.Add("SkipCertificateCheck", $NPEnv.TrustAllCerts)
		}
		else
		{
			if ($NPEnv.TrustAllCerts)
			{
				if (-not ("CTrustAllCerts" -as [type]))
				{
					add-type -TypeDefinition @"
using System;
using System.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;

public static class CTrustAllCerts {
    public static bool ReturnTrue(object sender,
        X509Certificate certificate,
        X509Chain chain,
        SslPolicyErrors sslPolicyErrors) { return true; }

    public static RemoteCertificateValidationCallback GetDelegate() {
        return new RemoteCertificateValidationCallback(CTrustAllCerts.ReturnTrue);
    }
}
"@
					Write-Verbose -Message "Added Cert Ignore Type"
				}
				
				[System.Net.ServicePointManager]::ServerCertificateValidationCallback = [CTrustAllCerts]::GetDelegate()
				Write-Verbose -Message "Server Certificate Validation Bypass"
			}
		}
		
		if ("" -eq $NPEnv.WebRequestSession.Cookies.GetCookies($NPEnv.URLServerAPI) -and ($null -ne $NPEnv.Credentials))
		{
			$SplatRest.Add("Credential", $NPEnv.Credentials)
		}
		
		#Convert Data to Json and add to body of request
		if ($null -ne $data)
		{
			if ($Data.GetType().name -like "Array*")
			{
				$jsondata = Convertto-Json @($Data)
			}
			elseif ($Data.GetType().name -ne "string")
			{
				$jsondata = Convertto-Json $Data
			}
			else { $jsondata = $Data }
			
			#Catch All
			if (!(($jsondata.StartsWith('{') -and $jsondata.EndsWith('}')) -or ($jsondata.StartsWith('[') -and $jsondata.EndsWith(']'))))
			{
				$jsondata = $Data | Convertto-Json
			}
			
			$SplatRest.Add("Body", $jsondata)
		}
		
		if ($PSBoundParameters.Debug.IsPresent) { $Global:NPSplat = $SplatRest }
		
		try { $Result = Invoke-RestMethod @SplatRest }
		catch [System.Net.WebException]{
			$EXCEPTION = $_.Exception
			Write-Warning -Message "From: $($Exception.Response.ResponseUri.AbsoluteUri) `nResponse: $($Exception.Response.StatusDescription)"
			break
		}
		
		if ($Null -ne $Result)
		{
			if ((($Result | Get-Member -MemberType Properties).count -eq 1 -and ($null -ne $Result.data)))
			{
				
				if ($null -ne $Result.data.items) { $Result.data.items }
				else { $Result.data }
				
			}
			else
			{
				$Result
			}
		}
		else { Write-Error -Message "no Results received" }
		
	}
#endregion

#region Invoke-GetNPFilter_ps1
	Function GetNPFilter ($Property, $Value, $Filter)
	{
		if ($null -ne $Property)
		{
			$Value = $Value.replace('*', '%')
			if ($Filter.StartsWith("?")) { $qt = "&" }
			else { $qt = "?" }
			$Filter = "$($Filter)$($qt)$($Property)=$($Value)"
		}
		$Filter
	}
#endregion

#region Invoke-AddNPProperty_ps1
	
	Function AddNPProperty ($Property, $NPObject, $path)
	{
		$PropertyValues = Get-Variable -Name "NP$($Property)" -ValueOnly -ErrorAction SilentlyContinue
		$NPObject | ForEach-Object{
			$Object = $_
			$ObjPath = "$($path)/$($Object.ID)/$Property"
			$NPObjProperties = $(Invoke-NPRequest -Path $ObjPath -method Get)
			$LookupProperties = $NPObjProperties | ForEach-Object{
				$ObjProperty = $_;
				$ObjectProperty = $PropertyValues | Where-Object{ $_.id -eq $ObjProperty }
				if ($Null -eq $ObjectProperty)
				{
					Write-Verbose "$($ObjProperty) Missing from Internal $($Property) List: Updating"
					& "Get-NP$($Property)" -update
					$PropertyValues = Get-Variable -Name "NP$($Property)" -ValueOnly
					$ObjectProperty = $PropertyValues | Where-Object{ $_.id -eq $ObjProperty }
				}
				$ObjectProperty
			}
			Add-Member -InputObject $Object -MemberType NoteProperty -Name $Property -Value $LookupProperties
		}
	}
	
#endregion

#region Invoke-Get-NPFilters_ps1
	function Get-NPFilters
	{
		param
		(
			[parameter(DontShow)]
			[switch]$Update
		)
		$Script:NPFilters = Invoke-NPRequest -Path "Filters" -method Get
		#The Update Switch is used to refresh the Internal List only
		#It is used when Called from Get-NPUsers and a Property is missing from the Internal List
		#The Internal List is used to speed up operations, by minimizing requests for data we have already received
		if ($Update.IsPresent -eq $false)
		{
			$Script:NPFilters
		}
	}
#endregion

#region Invoke-Get-NPGroups_ps1
	Function Get-NPGroups
	{
		param
		(
			[parameter(DontShow)]
			[switch]$Update
		)
		$Script:NPGroups = Invoke-NPRequest -Path "groups" -method Get
		
		#The Update Switch is used to refresh the Internal List only
		#It is used when Called from Get-NPUsers and a Property is missing from the Internal List
		#The Internal List is used to speed up operations, by minimizing requests for data we have already received
		if ($Update.IsPresent -eq $false)
		{
			$Script:NPGroups
		}
	}
	
#endregion

#region Invoke-Get-NPRoles_ps1
	function Get-NPRoles
	{
		param
		(
			[parameter(DontShow)]
			[switch]$Update
		)
		
		$Script:NPRoles = Invoke-NPRequest -Path "roles" -method Get
		
		#The Update Switch is used to refresh the Internal List only
		#It is used when Called from Get-NPUsers and a Property is missing from the Internal List
		#The Internal List is used to speed up operations, by minimizing requests for data we have already received
		if ($Update.IsPresent -eq $false)
		{
			$Script:NPRoles
		}
	}
#endregion

#region Invoke-Get-NPTasks_ps1
	function Get-NPTasks
	{
		param
		(
			$ID,
			[string]$Name,
			[switch]$Executions,
			[parameter(DontShow)]
			[switch]$Update
		)
		$BasePath = "tasks"
		
		if ($Null -ne $ID)
		{
			$Path = "$BasePath/$($ID)"
		}
		else
		{
			$Path = "$BasePath"
		}
		
		$Path = "$($Path)$($Filter)"
		Write-Verbose $Path
		
		#The Update Switch is used to refresh the Internal List only
		#It is used when Called from Get-NPUsers and a Property is missing from the Internal List
		#The Internal List is used to speed up operations, by minimizing requests for data we have already received
		$Script:NPTasks = Invoke-NPRequest -Path $Path -method Get
		
		if ($Executions.IsPresent)
		{
			$NPTasks | ForEach-Object{
				$ExecutionPath = "tasks/$($_.id)/Executions"
				$NPTaskExecutions = Invoke-NPRequest -Path $ExecutionPath -method Get
				Add-Member -InputObject $_ -MemberType NoteProperty -Name "Executions" -Value $NPTaskExecutions
			}
		}
		
		if ($Update.IsPresent -eq $false)
		{
			$Script:NPTasks
		}
		
	}
#endregion

#region Invoke-NPUsers_ps1
	
	<#
	#Avaliable APIs
	    Get-NPUsers
	    get /users
	    get /users/{id}
	    get /users/{id}/filters
	    get /users/{id}/groups
	    get /users/{id}/roles
	
	    Update-NPUser
	    put /users/{id}/filters
	    put /users/{id}/groups
	    put /users/{id}
	    put /users/{id}/roles
	
	    New-NPUser
	    post /users
	
	    Remove-NPUser
	    delete /users/{id}
	
	#>
	
	<#
	#Implemented APIS
	Get-NPUsers
	get /users
	get /users/{id}
	get /users/{id}/filters
	get /users/{id}/groups
	get /users/{id}/roles
	#>
	
	<#
		.SYNOPSIS
			Gets details of the Users in NPrinting
		
		.DESCRIPTION
	
		
		.PARAMETER ID
			A description of the ID parameter.
		
		.PARAMETER UserName
			A description of the UserName parameter.
		
		.PARAMETER Email
			A description of the Email parameter.
		
		.PARAMETER roles
			A description of the roles parameter.
		
		.PARAMETER groups
			A description of the groups parameter.
		
		.PARAMETER filters
			A description of the filters parameter.
		
		.EXAMPLE
			Get-NPUsers -roles -groups -filters
			Get-NPUsers -UserName Marc -roles -groups -filters
	
	#>
	function Get-NPUsers
	{
		[CmdletBinding()]
		param
		(
			[string]$ID,
			[string]$UserName,
			[string]$Email,
			[switch]$roles,
			[switch]$groups,
			[switch]$filters
		)
		
		$Filter = ""
		switch ($PSBoundParameters.Keys)
		{
			ID{ $Filter = GetNPFilter -Filter $Filter -Property "ID" -Value $ID }
			UserName{ $Filter = GetNPFilter -Filter $Filter -Property "UserName" -Value $UserName }
			EMail{ $Filter = GetNPFilter -Filter $Filter -Property "EMail" -Value $EMail }
		}
		$BasePath = "Users"
		$Path = "$($BasePath)$($Filter)"
		$NPUsers = Invoke-NPRequest -Path $Path -method Get
		
		if ($roles.IsPresent)
		{
			Add-NPProperty -Property "Roles" -NPObject $NPUsers -path $BasePath
		}
		if ($groups.IsPresent)
		{
			Add-NPProperty -Property "Groups" -NPObject $NPUsers -path $BasePath
		}
		if ($filters.IsPresent)
		{
			Add-NPProperty -Property "Filters" -NPObject $NPUsers -path $BasePath
		}
		$NPUsers
	}
	
#endregion

#region Invoke-NPReports_ps1
	
	#This Function is a mess, it kinda works, but there will be filter scenarios where it is broken.
	#WIP
	function Get-NPReports{
		param
		(
			$ID,
			[string]$Name,
			[parameter(DontShow)]
			[switch]$Update
		)
		$BasePath = "Reports"
		
		if ($Null -ne $ID)
		{
			$Path = "$BasePath/$($ID)"
		}
		else
		{
			$Path = "$BasePath"
		}
		
		$Path = "$($Path)$($Filter)"
	    Write-Verbose $Path
	    
	    #The Update Switch is used to refresh the Internal List only
		#It is used when Called from Get-NPUsers and a Property is missing from the Internal List
		#The Internal List is used to speed up operations, by minimizing requests for data we have already received
		$Script:NPReports = Invoke-NPRequest -Path $Path -method Get
		if ($Update.IsPresent -eq $false)
		{
			$Script:NPReports
		}
		
	}
	
#endregion

#region Invoke-NPApps_ps1
	
	#This Function is a mess, it kinda works, but there will be filter scenarios where it is broken.
	#WIP
	function Get-NPApps
	{
		param
		(
			$ID,
			[string]$Name,
			[parameter(DontShow)]
			[switch]$Update
		)
		$BasePath = "Apps"
		
		if ($Null -ne $ID)
		{
			$Path = "$BasePath/$($ID)"
		}
		else
		{
			$Path = "$BasePath"
		}
		
		$FilterApps = $Script:NPapps
		
		switch ($PSBoundParameters.Keys)
		{
			name{
				if ($Name -match '\*')
				{
					$FilterApps = $FilterApps | Where-Object { $_.name -like $Name }
				}
				else
				{
					$FilterApps = $FilterApps | Where-Object { $_.name -eq $Name }
				}
			}
			ID{ $Path = "$BasePath/$($ID)" }
			Update{ $Path = "$BasePath" }
			Default { $Path = "$BasePath" }
		}
		
		$Path = "$($Path)$($Filter)"
	    Write-Verbose $Path
	    
	    #The Update Switch is used to refresh the Internal List only
		#It is used when Called from Get-NPUsers and a Property is missing from the Internal List
		#The Internal List is used to speed up operations, by minimizing requests for data we have already received
		
		if ($Null -eq $FilterApps)
		{
			$Script:NPapps = Invoke-NPRequest -Path $Path -method Get
			if ($Update.IsPresent -eq $false)
			{
				$Script:NPapps
			}
		}
		else
		{
			if ($Update.IsPresent -eq $false)
			{
				$FilterApps
			}
			
		}
		
	}
	
#endregion

#region Invoke-Add-NPFilterField_ps1
	function Add-NPFilterField
	{
		[CmdletBinding()]
		param
		(
			$NPFilter,
			[Parameter(Mandatory = $true)]
			[string]$ConnectionID,
			[Parameter(Mandatory = $true)]
			[string]$FieldName,
			[ValidateSet('text', 'number', 'expression')]
			[string]$FieldType = "text",
			[Parameter(Mandatory = $true)]
			[string[]]$FieldValue,
			[switch]$Overridevalues
		)
		if ($NPFilter.GetType().name -eq "String")
		{
		$NPFilter = Invoke-NPRequest -Path "filters/$($NPFilter)" -method Get
		}
		
		if ($NPFilter.fields.name -contains "$FieldName")
		{
			$Field = $NPFilter.fields | ?{ $_.name -eq "$FieldName" }
			[System.Collections.ArrayList]$Field.values = $Field.values
		}
		else
		{
			$Field = [PSCustomObject]@{
				connectionId   = $ConnectionID
				name		   = $FieldName
				overrideValues = $Overridevalues.IsPresent
				values		   = New-Object System.Collections.ArrayList
			}
			$NPFilter.fields += $Field
		}
		foreach ($Value in $FieldValue)
		{
			$Field.values.Add(
				$([PSCustomObject]@{
						value = $Value
						type  = $FieldType
					})
			) | out-null
		}
		
		$json = $NPFilter | ConvertTo-Json -Depth 10
		$NPut = Invoke-NPRequest -Path "filters/$($NPFilter.id)" -method Put -Data $json
		Invoke-NPRequest -Path "filters/$($NPFilter.id)" -method Get
	}
	
#endregion

#region Invoke-New-NPFilter_ps1
	function New-NPFilter
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true)]
			[String]$FilterName,
			[string]$FilterDescription,
			[Parameter(Mandatory = $true)]
			[string]$AppID,
			[bool]$enabled = $true
		)
		
		$NewNPFilter = @{
			appid	    = $AppID
			enabled	    = $enabled
			name	    = $FilterName
			description = $FilterDescription
			fields	    = New-Object System.Collections.ArrayList
		}
		$json = $NewNPFilter | ConvertTo-Json
		$Create = Invoke-NPRequest -Path "filters" -method Post -data $json
		$Filter = ""
		$Filter = GetNPFilter -Property appid -Value $AppID -Filter $Filter
		$Results = Invoke-NPRequest -Path "filters/$Filter" -method get
		$Result = $Results[0]
		return $Result
	}
	
#endregion

#region Invoke-Get-NPConnections_ps1
	function Get-NPConnections
	{
		param
		(
			[parameter(DontShow)]
			[switch]$Update
		)
		
		$Script:NPConnections = Invoke-NPRequest -Path "connections" -method Get
		if ($Update.IsPresent -eq $false)
		{
			$Script:NPConnections
		}
	}
#endregion

	<#	
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.155
		 Created on:   	2018-12-03 10:21 AM
		 Created by:   	Marc Collins
		 Organization: 	Qlik - Consulting
		 Filename:     	Qlik-NPrinting-CLI.psm1
		-------------------------------------------------------------------------
		 Module Name: Qlik-NPrinting-CLI
		===========================================================================
		Qlik NPrinting CLI - PowerShell Module to work with NPrinting
		The Function "Invoke-NPRequest" can be used to access all the NPrinting API's
	#>
	
	Export-ModuleMember -Function Get-*, Add-*, Invoke-*, New-*
	
# SIG # Begin signature block
# MIIiBAYJKoZIhvcNAQcCoIIh9TCCIfECAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCAXRBQy30JaDk8o
# OamNzYLkjCKkUrZ9ig4c9xagaHLVH6CCHEcwggO3MIICn6ADAgECAhAM5+DlF9hG
# /o/lYPwb8DA5MA0GCSqGSIb3DQEBBQUAMGUxCzAJBgNVBAYTAlVTMRUwEwYDVQQK
# EwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5jb20xJDAiBgNV
# BAMTG0RpZ2lDZXJ0IEFzc3VyZWQgSUQgUm9vdCBDQTAeFw0wNjExMTAwMDAwMDBa
# Fw0zMTExMTAwMDAwMDBaMGUxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2Vy
# dCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5jb20xJDAiBgNVBAMTG0RpZ2lD
# ZXJ0IEFzc3VyZWQgSUQgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
# AQoCggEBAK0OFc7kQ4BcsYfzt2D5cRKlrtwmlIiq9M71IDkoWGAM+IDaqRWVMmE8
# tbEohIqK3J8KDIMXeo+QrIrneVNcMYQq9g+YMjZ2zN7dPKii72r7IfJSYd+fINcf
# 4rHZ/hhk0hJbX/lYGDW8R82hNvlrf9SwOD7BG8OMM9nYLxj+KA+zp4PWw25EwGE1
# lhb+WZyLdm3X8aJLDSv/C3LanmDQjpA1xnhVhyChz+VtCshJfDGYM2wi6YfQMlqi
# uhOCEe05F52ZOnKh5vqk2dUXMXWuhX0irj8BRob2KHnIsdrkVxfEfhwOsLSSplaz
# vbKX7aqn8LfFqD+VFtD/oZbrCF8Yd08CAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgGG
# MA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFEXroq/0ksuCMS1Ri6enIZ3zbcgP
# MB8GA1UdIwQYMBaAFEXroq/0ksuCMS1Ri6enIZ3zbcgPMA0GCSqGSIb3DQEBBQUA
# A4IBAQCiDrzf4u3w43JzemSUv/dyZtgy5EJ1Yq6H6/LV2d5Ws5/MzhQouQ2XYFwS
# TFjk0z2DSUVYlzVpGqhH6lbGeasS2GeBhN9/CTyU5rgmLCC9PbMoifdf/yLil4Qf
# 6WXvh+DfwWdJs13rsgkq6ybteL59PyvztyY1bV+JAbZJW58BBZurPSXBzLZ/wvFv
# hsb6ZGjrgS2U60K3+owe3WLxvlBnt2y98/Efaww2BxZ/N3ypW2168RJGYIPXJwS+
# S86XvsNnKmgR34DnDDNmvxMNFG7zfx9jEB76jRslbWyPpbdhAbHSoyahEHGdreLD
# +cOZUbcrBwjOLuZQsqf6CkUvovDyMIIFMDCCBBigAwIBAgIQBAkYG1/Vu2Z1U0O1
# b5VQCDANBgkqhkiG9w0BAQsFADBlMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGln
# aUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQuY29tMSQwIgYDVQQDExtE
# aWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgQ0EwHhcNMTMxMDIyMTIwMDAwWhcNMjgx
# MDIyMTIwMDAwWjByMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5j
# MRkwFwYDVQQLExB3d3cuZGlnaWNlcnQuY29tMTEwLwYDVQQDEyhEaWdpQ2VydCBT
# SEEyIEFzc3VyZWQgSUQgQ29kZSBTaWduaW5nIENBMIIBIjANBgkqhkiG9w0BAQEF
# AAOCAQ8AMIIBCgKCAQEA+NOzHH8OEa9ndwfTCzFJGc/Q+0WZsTrbRPV/5aid2zLX
# cep2nQUut4/6kkPApfmJ1DcZ17aq8JyGpdglrA55KDp+6dFn08b7KSfH03sjlOSR
# I5aQd4L5oYQjZhJUM1B0sSgmuyRpwsJS8hRniolF1C2ho+mILCCVrhxKhwjfDPXi
# TWAYvqrEsq5wMWYzcT6scKKrzn/pfMuSoeU7MRzP6vIK5Fe7SrXpdOYr/mzLfnQ5
# Ng2Q7+S1TqSp6moKq4TzrGdOtcT3jNEgJSPrCGQ+UpbB8g8S9MWOD8Gi6CxR93O8
# vYWxYoNzQYIH5DiLanMg0A9kczyen6Yzqf0Z3yWT0QIDAQABo4IBzTCCAckwEgYD
# VR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwEwYDVR0lBAwwCgYIKwYB
# BQUHAwMweQYIKwYBBQUHAQEEbTBrMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5k
# aWdpY2VydC5jb20wQwYIKwYBBQUHMAKGN2h0dHA6Ly9jYWNlcnRzLmRpZ2ljZXJ0
# LmNvbS9EaWdpQ2VydEFzc3VyZWRJRFJvb3RDQS5jcnQwgYEGA1UdHwR6MHgwOqA4
# oDaGNGh0dHA6Ly9jcmw0LmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEFzc3VyZWRJRFJv
# b3RDQS5jcmwwOqA4oDaGNGh0dHA6Ly9jcmwzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2Vy
# dEFzc3VyZWRJRFJvb3RDQS5jcmwwTwYDVR0gBEgwRjA4BgpghkgBhv1sAAIEMCow
# KAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNvbS9DUFMwCgYIYIZI
# AYb9bAMwHQYDVR0OBBYEFFrEuXsqCqOl6nEDwGD5LfZldQ5YMB8GA1UdIwQYMBaA
# FEXroq/0ksuCMS1Ri6enIZ3zbcgPMA0GCSqGSIb3DQEBCwUAA4IBAQA+7A1aJLPz
# ItEVyCx8JSl2qB1dHC06GsTvMGHXfgtg/cM9D8Svi/3vKt8gVTew4fbRknUPUbRu
# pY5a4l4kgU4QpO4/cY5jDhNLrddfRHnzNhQGivecRk5c/5CxGwcOkRX7uq+1UcKN
# JK4kxscnKqEpKBo6cSgCPC6Ro8AlEeKcFEehemhor5unXCBc2XGxDI+7qPjFEmif
# z0DLQESlE/DmZAwlCEIysjaKJAL+L3J+HNdJRZboWR3p+nRka7LrZkPas7CM1ekN
# 3fYBIM6ZMWM9CBoYs4GbT8aTEAb8B4H6i9r5gkn3Ym6hU/oSlBiFLpKR6mhsRDKy
# ZqHnGKSaZFHvMIIGFTCCBP2gAwIBAgIQBUU2tOIOpjz3goldTFCqrDANBgkqhkiG
# 9w0BAQsFADByMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkw
# FwYDVQQLExB3d3cuZGlnaWNlcnQuY29tMTEwLwYDVQQDEyhEaWdpQ2VydCBTSEEy
# IEFzc3VyZWQgSUQgQ29kZSBTaWduaW5nIENBMB4XDTE5MDcyMjAwMDAwMFoXDTIy
# MDcxMzEyMDAwMFowUjELMAkGA1UEBhMCQVUxETAPBgNVBAgTCFZpY3RvcmlhMRIw
# EAYDVQQHEwlNZWxib3VybmUxDTALBgNVBAoTBE5OZXQxDTALBgNVBAMTBE5OZXQw
# ggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDStfx4/waget66hN3aMKtM
# e2qUiCmimgukMo3U3BJaSSm5nKHIgpS0Rd+kr8+gkgnejmHwRQuhwkI3lnAYAvnS
# fW2xGuJzkwYEulNqdUMyYgbI7nmbXLWYqmQn+itTfGcw1TVP5g8x1OhJK3d93D/K
# TAf32nwwH35FbvSJk/FFu7GJB/Jt+UuXGf3TR1xFAmmukozZLJjo2Trh1dWg2wZ4
# pcPunm2ZHem2QAWpUJWYl57eb0plMJKcUzABFC8t6XCyyoLpif2PoI+hEdzXHXGl
# 7NABzbYTXvRoUT7bJDW3DQ6hDXLw5Mk8CpoqZa0rQCrM4iP7EsOL3b7bqrAygbtV
# lV7Y6CXSRdPQCe3Z79XFl03aaF1Om9ymSlRPXuY9SXjdxbYBOUoDrpSACjAeKK/p
# K7cOMi9Km6zB271p/0N2SCBvgY+Lx6Sdl4IV10o77JK0c4xymIFt5xmGk7Yfx0SN
# ByW7jl4By7iid6g7MkWRJRuwJn6uJhRJyJCdsi6KCJias0+s2g+g4A0hBwYhLOd1
# p9nDQk8rZicUiFJI1JJoj/kGmjiNoZ5ZJoul27BI7d2o1UGEuRTOg4vD/S0Nlrge
# gool1F6sq4pqBtMVkLm8fIhFKdKRrUud+Jzq6JNnisT0ZuCGUKORljbCYDLH4x6t
# Iric8RbuOQyj/n0AC/ZD7QIDAQABo4IBxTCCAcEwHwYDVR0jBBgwFoAUWsS5eyoK
# o6XqcQPAYPkt9mV1DlgwHQYDVR0OBBYEFBUr9Axx5I0Y0ScGhSHNNloL1oRVMA4G
# A1UdDwEB/wQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAzB3BgNVHR8EcDBuMDWg
# M6Axhi9odHRwOi8vY3JsMy5kaWdpY2VydC5jb20vc2hhMi1hc3N1cmVkLWNzLWcx
# LmNybDA1oDOgMYYvaHR0cDovL2NybDQuZGlnaWNlcnQuY29tL3NoYTItYXNzdXJl
# ZC1jcy1nMS5jcmwwTAYDVR0gBEUwQzA3BglghkgBhv1sAwEwKjAoBggrBgEFBQcC
# ARYcaHR0cHM6Ly93d3cuZGlnaWNlcnQuY29tL0NQUzAIBgZngQwBBAEwgYQGCCsG
# AQUFBwEBBHgwdjAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuZGlnaWNlcnQuY29t
# ME4GCCsGAQUFBzAChkJodHRwOi8vY2FjZXJ0cy5kaWdpY2VydC5jb20vRGlnaUNl
# cnRTSEEyQXNzdXJlZElEQ29kZVNpZ25pbmdDQS5jcnQwDAYDVR0TAQH/BAIwADAN
# BgkqhkiG9w0BAQsFAAOCAQEA3QC+vdV0VD7dSMArhDSsOp9bH0w+wABMw+s4aa1K
# 1eiVjxcyeM/2IGadiz2GQ54eJtev1CNjvaTTIcpBt5oNSAieOYUxmb0WPnDPGk1f
# 4qBt5QAyUNmfR+tuEiny3/qv3U9gqujb//bMo9jxsdDzp7ix4M+HNlRlU23Nw3YU
# h0aYpI4rEpfST1I6RY6pU/1E1n4C6DL7/w+KdexDmWq0+MpAIBOO8yW1iUtHI9zt
# ZZ0oQzu15Ph/3L/fNn68FnNmpK0TqL9nXmdbsPwXCegJwsl/oGZAArXrXdEpo0ID
# glIv4FWVEiJFoUsSZo+cBFdCHSYyiS62n2nOWLSl1pQ7jDCCBmowggVSoAMCAQIC
# EAMBmgI6/1ixa9bV6uYX8GYwDQYJKoZIhvcNAQEFBQAwYjELMAkGA1UEBhMCVVMx
# FTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3LmRpZ2ljZXJ0LmNv
# bTEhMB8GA1UEAxMYRGlnaUNlcnQgQXNzdXJlZCBJRCBDQS0xMB4XDTE0MTAyMjAw
# MDAwMFoXDTI0MTAyMjAwMDAwMFowRzELMAkGA1UEBhMCVVMxETAPBgNVBAoTCERp
# Z2lDZXJ0MSUwIwYDVQQDExxEaWdpQ2VydCBUaW1lc3RhbXAgUmVzcG9uZGVyMIIB
# IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAo2Rd/Hyz4II14OD2xirmSXU7
# zG7gU6mfH2RZ5nxrf2uMnVX4kuOe1VpjWwJJUNmDzm9m7t3LhelfpfnUh3SIRDsZ
# yeX1kZ/GFDmsJOqoSyyRicxeKPRktlC39RKzc5YKZ6O+YZ+u8/0SeHUOplsU/UUj
# joZEVX0YhgWMVYd5SEb3yg6Np95OX+Koti1ZAmGIYXIYaLm4fO7m5zQvMXeBMB+7
# NgGN7yfj95rwTDFkjePr+hmHqH7P7IwMNlt6wXq4eMfJBi5GEMiN6ARg27xzdPpO
# 2P6qQPGyznBGg+naQKFZOtkVCVeZVjCT88lhzNAIzGvsYkKRrALA76TwiRGPdwID
# AQABo4IDNTCCAzEwDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwFgYDVR0l
# AQH/BAwwCgYIKwYBBQUHAwgwggG/BgNVHSAEggG2MIIBsjCCAaEGCWCGSAGG/WwH
# ATCCAZIwKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNvbS9DUFMw
# ggFkBggrBgEFBQcCAjCCAVYeggFSAEEAbgB5ACAAdQBzAGUAIABvAGYAIAB0AGgA
# aQBzACAAQwBlAHIAdABpAGYAaQBjAGEAdABlACAAYwBvAG4AcwB0AGkAdAB1AHQA
# ZQBzACAAYQBjAGMAZQBwAHQAYQBuAGMAZQAgAG8AZgAgAHQAaABlACAARABpAGcA
# aQBDAGUAcgB0ACAAQwBQAC8AQwBQAFMAIABhAG4AZAAgAHQAaABlACAAUgBlAGwA
# eQBpAG4AZwAgAFAAYQByAHQAeQAgAEEAZwByAGUAZQBtAGUAbgB0ACAAdwBoAGkA
# YwBoACAAbABpAG0AaQB0ACAAbABpAGEAYgBpAGwAaQB0AHkAIABhAG4AZAAgAGEA
# cgBlACAAaQBuAGMAbwByAHAAbwByAGEAdABlAGQAIABoAGUAcgBlAGkAbgAgAGIA
# eQAgAHIAZQBmAGUAcgBlAG4AYwBlAC4wCwYJYIZIAYb9bAMVMB8GA1UdIwQYMBaA
# FBUAEisTmLKZB+0e36K+Vw0rZwLNMB0GA1UdDgQWBBRhWk0ktkkynUoqeRqDS/Qe
# icHKfTB9BgNVHR8EdjB0MDigNqA0hjJodHRwOi8vY3JsMy5kaWdpY2VydC5jb20v
# RGlnaUNlcnRBc3N1cmVkSURDQS0xLmNybDA4oDagNIYyaHR0cDovL2NybDQuZGln
# aWNlcnQuY29tL0RpZ2lDZXJ0QXNzdXJlZElEQ0EtMS5jcmwwdwYIKwYBBQUHAQEE
# azBpMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wQQYIKwYB
# BQUHMAKGNWh0dHA6Ly9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEFzc3Vy
# ZWRJRENBLTEuY3J0MA0GCSqGSIb3DQEBBQUAA4IBAQCdJX4bM02yJoFcm4bOIyAP
# gIfliP//sdRqLDHtOhcZcRfNqRu8WhY5AJ3jbITkWkD73gYBjDf6m7GdJH7+IKRX
# rVu3mrBgJuppVyFdNC8fcbCDlBkFazWQEKB7l8f2P+fiEUGmvWLZ8Cc9OB0obzpS
# CfDscGLTYkuw4HOmksDTjjHYL+NtFxMG7uQDthSr849Dp3GdId0UyhVdkkHa+Q+B
# 0Zl0DSbEDn8btfWg8cZ3BigV6diT5VUW8LsKqxzbXEgnZsijiwoc5ZXarsQuWaBh
# 3drzbaJh6YoLbewSGL33VVRAA5Ira8JRwgpIr7DUbuD0FAo6G+OPPcqvao173NhE
# MIIGzTCCBbWgAwIBAgIQBv35A5YDreoACus/J7u6GzANBgkqhkiG9w0BAQUFADBl
# MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
# d3cuZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJv
# b3QgQ0EwHhcNMDYxMTEwMDAwMDAwWhcNMjExMTEwMDAwMDAwWjBiMQswCQYDVQQG
# EwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNl
# cnQuY29tMSEwHwYDVQQDExhEaWdpQ2VydCBBc3N1cmVkIElEIENBLTEwggEiMA0G
# CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDogi2Z+crCQpWlgHNAcNKeVlRcqcTS
# QQaPyTP8TUWRXIGf7Syc+BZZ3561JBXCmLm0d0ncicQK2q/LXmvtrbBxMevPOkAM
# Rk2T7It6NggDqww0/hhJgv7HxzFIgHweog+SDlDJxofrNj/YMMP/pvf7os1vcyP+
# rFYFkPAyIRaJxnCI+QWXfaPHQ90C6Ds97bFBo+0/vtuVSMTuHrPyvAwrmdDGXRJC
# geGDboJzPyZLFJCuWWYKxI2+0s4Grq2Eb0iEm09AufFM8q+Y+/bOQF1c9qjxL6/s
# iSLyaxhlscFzrdfx2M8eCnRcQrhofrfVdwonVnwPYqQ/MhRglf0HBKIJAgMBAAGj
# ggN6MIIDdjAOBgNVHQ8BAf8EBAMCAYYwOwYDVR0lBDQwMgYIKwYBBQUHAwEGCCsG
# AQUFBwMCBggrBgEFBQcDAwYIKwYBBQUHAwQGCCsGAQUFBwMIMIIB0gYDVR0gBIIB
# yTCCAcUwggG0BgpghkgBhv1sAAEEMIIBpDA6BggrBgEFBQcCARYuaHR0cDovL3d3
# dy5kaWdpY2VydC5jb20vc3NsLWNwcy1yZXBvc2l0b3J5Lmh0bTCCAWQGCCsGAQUF
# BwICMIIBVh6CAVIAQQBuAHkAIAB1AHMAZQAgAG8AZgAgAHQAaABpAHMAIABDAGUA
# cgB0AGkAZgBpAGMAYQB0AGUAIABjAG8AbgBzAHQAaQB0AHUAdABlAHMAIABhAGMA
# YwBlAHAAdABhAG4AYwBlACAAbwBmACAAdABoAGUAIABEAGkAZwBpAEMAZQByAHQA
# IABDAFAALwBDAFAAUwAgAGEAbgBkACAAdABoAGUAIABSAGUAbAB5AGkAbgBnACAA
# UABhAHIAdAB5ACAAQQBnAHIAZQBlAG0AZQBuAHQAIAB3AGgAaQBjAGgAIABsAGkA
# bQBpAHQAIABsAGkAYQBiAGkAbABpAHQAeQAgAGEAbgBkACAAYQByAGUAIABpAG4A
# YwBvAHIAcABvAHIAYQB0AGUAZAAgAGgAZQByAGUAaQBuACAAYgB5ACAAcgBlAGYA
# ZQByAGUAbgBjAGUALjALBglghkgBhv1sAxUwEgYDVR0TAQH/BAgwBgEB/wIBADB5
# BggrBgEFBQcBAQRtMGswJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0
# LmNvbTBDBggrBgEFBQcwAoY3aHR0cDovL2NhY2VydHMuZGlnaWNlcnQuY29tL0Rp
# Z2lDZXJ0QXNzdXJlZElEUm9vdENBLmNydDCBgQYDVR0fBHoweDA6oDigNoY0aHR0
# cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0QXNzdXJlZElEUm9vdENBLmNy
# bDA6oDigNoY0aHR0cDovL2NybDQuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0QXNzdXJl
# ZElEUm9vdENBLmNybDAdBgNVHQ4EFgQUFQASKxOYspkH7R7for5XDStnAs0wHwYD
# VR0jBBgwFoAUReuir/SSy4IxLVGLp6chnfNtyA8wDQYJKoZIhvcNAQEFBQADggEB
# AEZQPsm3KCSnOB22WymvUs9S6TFHq1Zce9UNC0Gz7+x1H3Q48rJcYaKclcNQ5IK5
# I9G6OoZyrTh4rHVdFxc0ckeFlFbR67s2hHfMJKXzBBlVqefj56tizfuLLZDCwNK1
# lL1eT7EF0g49GqkUW6aGMWKoqDPkmzmnxPXOHXh2lCVz5Cqrz5x2S+1fwksW5Etw
# TACJHvzFebxMElf+X+EevAJdqP77BzhPDcZdkbkPZ0XN1oPt55INjbFpjE/7WeAj
# D9KqrgB87pxCDs+R1ye3Fu4Pw718CqDuLAhVhSK46xgaTfwqIa1JMYNHlXdx3LEb
# S0scEJx3FMGdTy9alQgpECYxggUTMIIFDwIBATCBhjByMQswCQYDVQQGEwJVUzEV
# MBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQuY29t
# MTEwLwYDVQQDEyhEaWdpQ2VydCBTSEEyIEFzc3VyZWQgSUQgQ29kZSBTaWduaW5n
# IENBAhAFRTa04g6mPPeCiV1MUKqsMA0GCWCGSAFlAwQCAQUAoEwwGQYJKoZIhvcN
# AQkDMQwGCisGAQQBgjcCAQQwLwYJKoZIhvcNAQkEMSIEIA5vG0USM3I1K7sahU7B
# JXeY/AJ3TdpILLElYj8pxuNFMA0GCSqGSIb3DQEBAQUABIICABSPesbgLwgH1DB5
# Cu43RN4trCxrd34gbTmJsduHMpQd7q7tuZ14DrIuisoP+3afFianUz4Z6G9ZaFUj
# wKm/3hsTj5tAItuMjGHkAf8l6a2r2Z0a9pq5PBrnTIx/xH/Hj0MiEbLx0BkJ9UBt
# 97Iw5vVCWzoVkSIy6TUBef2asGnWNs0AkY7kZLtK4+fSvq9mtv4tu/xIml1tr0WE
# 61XiGKVkpaud2T8byT8XJTqFx82CQ9wjk07RcBffK/8c9VpaRZLB9wJQN54x/+eY
# x50YRUeC5zVx0GMQnq9fJxWl/wAiQop/JFF6FNKXMHswDWTUOqEnTW5ICLQKRWt1
# u3O0o+L5N9KbX+ZiwB56rJSfy5yAcsgSEOIxDzf2uOJmn98T9JBBGwwLmgca2OvM
# GLTX1Fb+FCSJSJ5MVqMvMsp2yHkK94Yp1wXYbG4IW1x6rrY1X5HLJD8Y5bI/il3n
# tq2JFtihjfAn5Qj5yNtMdYAhXPHkyq/3ew2jR4VkBrW7I0WnkrYpK6ea2kNLerio
# fbYjjuXfFaYmVvwf6CsR5D4X//LX53vy7yi0YbFsx+GmtEI8nuQSXbbX/cWHZ+XU
# RhzxqISNlg/Kw3x7sEgJ/CjNE6h+5ALpLiJAoNEMmtKlVZG07k21GVImm0EY3L0W
# lrlWw4zurpZwXNlm0nXWYR5Wh5YboYICDzCCAgsGCSqGSIb3DQEJBjGCAfwwggH4
# AgEBMHYwYjELMAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcG
# A1UECxMQd3d3LmRpZ2ljZXJ0LmNvbTEhMB8GA1UEAxMYRGlnaUNlcnQgQXNzdXJl
# ZCBJRCBDQS0xAhADAZoCOv9YsWvW1ermF/BmMAkGBSsOAwIaBQCgXTAYBgkqhkiG
# 9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0xOTA4MDkwNDU5MTBa
# MCMGCSqGSIb3DQEJBDEWBBTY8mhJsJyjcnXQwZOXMdA9En8BgTANBgkqhkiG9w0B
# AQEFAASCAQBIqS6BwejpfPUcbDSoYF1Kt/9APaUhow2ddp6fd6toeAUQzJzhesF9
# IDJH8JQlJpCjS/82CvBdlwX+y5HoRcSuhHW/bmm2bcs3SibJKsn6MfH7XlUMcvYn
# gQ7nkqmbh/AsFK2foOqtawW10E3G/uzdA7fpgKpP+EZUfoR4paQhxd5D+2odZomZ
# LDkWj8zy3ScrdUHh2rChDpphx+pfnIrdbZyd8d6G7G2y87aqcTSJ6G05Iv2/pNox
# NG1U+C50qzKlMHYNXl/srwoMUo4C1F2aC1+ENrjRly/F7BJ9xAC6JOUwh6MQlGWw
# w8wWh4eWU5+klmf+XV6yQ9u26U2f94pV
# SIG # End signature block
